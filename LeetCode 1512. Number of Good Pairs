//broot force and complexity O(n^2)
class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count=0;
        for (int i=0; i<nums.length-1; i++){
            for( int j=i+1; j <nums.length; j++){
                if (nums[i] == nums[j]){
                    count++;
                }
            }
        }
        return count;
    }
}

//using HashMap complexity O(n)

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count =0;
        HashMap <Integer,Integer> map = new HashMap <Integer,Integer>();
        
        for( int i:nums){
            map.put(i,map.getOrDefault(i,0)+1);
            
        }
        for( int i:map.values()){
            count += (i*(i-1))/2;
        }
        
        
        return count;
        
    }
}
