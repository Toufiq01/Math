class Solution {
    public int[] distributeCandies(int candies, int num_people) {
        int[] distribution = new int[num_people];
        for(int i =1; ; i++){
            int j = (i-1) % num_people;
            if (i>candies) {
                distribution[j] += candies;
                break;
            }
            
            distribution[j] +=i;
            candies -= i;
        }
        return distribution;
    }  
}

//or modified solution
class Solution {
    public int[] distributeCandies(int candies, int num_people) {
        int[] distribution = new int[num_people];
        for(int i =0; candies>0; candies-= ++i){
            distribution[i%num_people] += Math.min(candies, i+1);
        }
        return distribution;
    }  
}
// learning recursion
class Solution {
    public int[] etaration(int[] distributation, int num_people, int candies, int i){
        if(candies<=0) return distributation; 
        distributation[i%num_people] += Math.min(candies, i+1);
        candies-= i+1;
        i++;
        return etaration(distributation, num_people, candies, i);
        
    }
    public int[] distributeCandies(int candies, int num_people) {
        int[] distributation = new int[num_people];
        int i=0;
        etaration(distributation, num_people, candies, i);
        return distributation;
        
    }  
}
